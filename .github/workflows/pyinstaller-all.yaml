# make sure to generate requirements.txt with pipreqs first!
name: Build

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:

jobs:

  # see https://data-dive.com/multi-os-deployment-in-cloud-using-pyinstaller-and-github-actions/
  # but here we build first and run our createrelease job afterwards, accessing the artifacts of our build job 
  build:
    name: Build packages
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            TARGET: macos
            #--volicon "Hello World.icns" \
            # for the dmg stuff, see https://www.pythonguis.com/tutorials/packaging-pyqt5-applications-pyinstaller-macos-dmg/
            CMD_BUILD: >
                pyinstaller --clean --log-level DEBUG --name "sph_uploader" --add-data conf:conf --add-data ui/*.ui:ui --add-data ../art/icon.png:art --specpath src --windowed --icon ../art/icon.png --onefile --argv-emulation src/main.py &&
                cd dist/ &&
                zip -r9 sph_uploader sph_uploader.app/ &&
                brew install create-dmg &&
                mkdir -p dmg &&
                cp -vr "sph_uploader.app" dmg/ &&
                create-dmg --volname "sph_uploader" --volicon sph_uploader.app/Contents/Resources/generated-* --window-pos 200 120 --window-size 600 300 --icon-size 100 --icon "sph_uploader.app" 175 120 --hide-extension "sph_uploader.app" --app-drop-link 425 120 "sph_uploader.dmg" "./dmg/"
            OUT_FILE_NAME: sph_uploader.dmg
            ASSET_MIME: application/binary
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: pyinstaller --clean --log-level DEBUG --name "sph_uploader" --add-data "conf;conf" --add-data "ui/*.ui;ui" --add-data "../art/icon.png;art" --splash ../art/splash.png --specpath src --windowed --icon ../art/icon.png --onefile src/main.py 
            OUT_FILE_NAME: sph_uploader.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
          - os: ubuntu-latest
            TARGET: linux
            CMD_BUILD: >
                pyinstaller --clean --log-level DEBUG --name "sph_uploader" --add-data conf:conf --add-data ui/*.ui:ui --add-data ../art/icon.png:art --splash ../art/splash.png --specpath src --windowed --icon ../art/icon.png --onefile src/main.py
            OUT_FILE_NAME: sph_uploader
            ASSET_MIME: application/x-executable
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.11
      uses: actions/setup-python@v2
      with:
        python-version: 3.11
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade pyinstaller
        pip install --upgrade pyinstaller-hooks-contrib
        pip install --upgrade Pillow
        pip install --upgrade -r src/requirements.txt        
    - name: Build with pyinstaller for ${{matrix.TARGET}}
      run: ${{matrix.CMD_BUILD}}
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.OUT_FILE_NAME}}
        path: ./dist/${{ matrix.OUT_FILE_NAME}} # or path/to/artifact

  createrelease:
    name: Create Release
    runs-on: [ubuntu-latest]
    needs: build
    steps:
    - name: Load build artifacts
      uses: actions/download-artifact@v3
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }}
        tag_name: ${{ github.ref }}
        target_commitish: master
        generate_release_notes: true
        body: |
          New release
        files: |
          sph_uploader*/*
        fail_on_unmatched_files: true
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: false

